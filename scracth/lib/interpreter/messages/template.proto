
enum message error {
    TIMEOUT,
    NETERROR,
    SERVER_ERROR,
    OUT_OF_RANGE,
    WRONG_VERSION,
    NOISY_MSG,
    NOT_AVAILABLE,
    INVALID_RESPONSE
}
enum message status{
    CACHED,
    CACHED_,
    PULL,
    EVENT_ON_INSERT,
    EVENT_ON_DELETE,
    EVENT_ON_UPDATE
}

hidden message {
    int id = 0;
    int version = +1;
    int timestamp = +2;
    error er = +3;
    status st = +4;
}

message CEP{
     char region[0,9] = 1;
     char sub_region[0,9] = 2;
     char sector[0,9] = 3;
     char subsector[0,9] = 4;
     char div_subsector[0,9] = 5;
     repeatable[3] char sufix[0,9] = 6;
};


stream message lines{
    repeatable pagination[10] string line = 1;
}
#diferences betweeen repeatable and repeatable[#]
#repeatable[3] char var==> char var[3];
#repeatable char var ==> char *var; //dinamically allocated variable

#it is possible to have a max size for a repeatable.
message array{ 
     repeatable[10] char c = 1;
};

#cached messages access the information once and are kept in memory while the program is running. The cached value is updated only on update or insert from the system, there is no database pulling.
#pull messages access the database immediatly - no event will be thrown - default behavior when there is no other modificator.
#event messages receive the information from the database only on change (no pull is done) - INSERT, UPDATE or DELETE.
#stream messages receive a controlled stream of data, if present or added. An ampty stream can be returned if there is no data available.

stream event cached pull message user_data{
    array name = 1;
    int age = 2;
    array address = 3;
    optional CEP cep = 4;
}user;

#only pull functions will be created
message d1{

}table_name

#only stream funcions will be created
stream message posts{
    array pagination text = 1;
    array subject = 2;
    array date = 3;
    user_data.id owner = 4;
}posts_data;

message something{
    boolean strike = 1;
    int data = 2;
}something_table;

messa something_more{
    something.id owner = 1;
    posts.id another_owner = 2;
}something_more_table;

message likes_to_posts{
    boolean like = 1;
    user_data.id owner = 2;
    pagination posts.id liked_to = 3;
}likes_to_posts;

message comments {
    array comment = 1;
    user_data.id owner = 2;
    pagination posts.id comented_on = 3;
}comments;

message likes_to_comments {
    boolean like = 1;
    user_data.id owner = 2;
    pagination comments.id liked_to = 3;
}likes_to_comments;

stream types are not required to be represented at the database.
stream message temperature { 
    int temperature [-30,150] = 1;
    int error [0.0,0.5]= 2;
    int frequency = 3;
};

#default messages are not requeired to have a representation on the database 
message color { 
    int R = 1;
    int G = 2;
    int B = 3;
};

#definition of the database (not the table) - will be defined in code, versionated and unique. o (compiled and unique to this release.)
# as per definition there are always 2 databases, one public and one private
@database:{
    admin:<admin password>,
    user:<user password>,
    guest:<guest password>,
}



